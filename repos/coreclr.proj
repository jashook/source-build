<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <PreferredHash>261b860d3c1599724751135b56c605e3edc293bd</PreferredHash>
  </PropertyGroup>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))/dir.props" />

  <PropertyGroup>
    <BuildArguments>$(Platform) $(Configuration) skiptests skipgenerateversion -skipmanagedtools</BuildArguments>
    <BuildArguments Condition="'$(OS)' != 'Windows_NT'">$(BuildArguments) -ignoreWarnings</BuildArguments>
    <BuildArguments Condition="'$(OS)' != 'Windows_NT'">$(BuildArguments) -skipgenerateversion</BuildArguments>
    <BuildArguments Condition="'$(SkipDisablePgo)' != 'true'">$(BuildArguments) -nopgooptimize</BuildArguments>
    <BuildArguments Condition="'$(OS)' != 'Windows_NT'">$(BuildArguments) msbuildonunsupportedplatform</BuildArguments>
    <BuildArguments Condition="'$(UseSystemLibraries)' == 'true' AND '$(OS)' != 'Windows_NT'">$(BuildArguments) cmakeargs -DCLR_CMAKE_USE_SYSTEM_LIBUNWIND=TRUE</BuildArguments>
    <BuildArguments Condition="$(Platform.Contains('arm'))">$(BuildArguments) skipnuget cross -skiprestore cmakeargs -DFEATURE_GDBJIT=TRUE</BuildArguments>

    <!-- Portable builds only apply to Linux - Mac and Windows are both always portable.
         Additionally, Linux builds are portable by default and only have a switch to turn it off -->
    <BuildArguments Condition="'$(TargetOS)' == 'Linux' and '$(PortableBuild)' == 'false'">$(BuildArguments) -PortableBuild=false</BuildArguments>

    <BuildArguments>$(BuildArguments) /bl</BuildArguments>
    <BuildArguments>$(BuildArguments) /p:ILLinkTrimAssembly=false</BuildArguments>
    <BuildArguments>$(BuildArguments) /p:CheckCDefines=false</BuildArguments>
    <BuildArguments>$(BuildArguments) /p:EnableSourceLink=false</BuildArguments>
    <BuildArguments>$(BuildArguments) -warnaserror:0</BuildArguments>

    <BuildCommand>bash -x $(ProjectDirectory)/build$(ShellExtension) $(BuildArguments)</BuildCommand>

    <BuildCommand Condition="$(Platform.Contains('arm'))">$(ArmEnvironmentVariables) $(BuildCommand)</BuildCommand>

    <CleanCommand>$(ProjectDirectory)/clean$(ShellExtension)</CleanCommand>
    <OfficialBuildId>20190422.75</OfficialBuildId>

    <OutputPlacementRepoApiImplemented>false</OutputPlacementRepoApiImplemented>
    <PackagesOutput>$(ProjectDirectory)bin/Product/$(TargetOS).$(Platform).$(Configuration)/.nuget/pkg</PackagesOutput>
  </PropertyGroup>

  <ItemGroup>
    <BuiltSdkPackageOverride Include="@(ILSdkOverride)" />
  </ItemGroup>

  <ItemGroup>
    <RepositoryReference Include="linker" />
    <RepositoryReference Include="roslyn" />
  </ItemGroup>

  <ItemGroup>
    <EnvironmentVariables Include="OfficialBuildId=$(OfficialBuildId)" />
    <EnvironmentVariables Remove="DOTNET_TOOL_DIR=$(DotNetCliToolDir)" />
    <EnvironmentVariables Remove="DotNetCoreSdkDir=$(DotNetCliToolDir)" />
    <EnvironmentVariables Remove="DotNetRoot=$(DotNetCliToolDir)" />
    <EnvironmentVariables Remove="_InitializeDotNetCli=$(DotNetCliToolDir)" />

    <EnvironmentVariables Include="DOTNET_TOOL_DIR=$(DotNet3CliToolDir)" />
    <EnvironmentVariables Include="DotNetCoreSdkDir=$(DotNet3CliToolDir)" />
    <EnvironmentVariables Include="DotNetRoot=$(DotNet3CliToolDir)" />
    <EnvironmentVariables Include="_InitializeDotNetCli=$(DotNet3CliToolDir)" />
  </ItemGroup>
  
  <PropertyGroup>
    <BuildTraversalSdkOverrideVersion>2.0.2</BuildTraversalSdkOverrideVersion>
  </PropertyGroup>

  <ItemGroup>
    <!-- Set Microsoft.Build.Traversal to work with source-build sdk resolver -->
    <EnvironmentVariables Include="SOURCE_BUILT_SDK_ID_BUILDTRAVERSAL=Microsoft.Build.Traversal" />
    <EnvironmentVariables Include="SOURCE_BUILT_SDK_VERSION_BUILDTRAVERSAL=$(BuildTraversalSdkOverrideVersion)" />
    <EnvironmentVariables Include="SOURCE_BUILT_SDK_DIR_BUILDTRAVERSAL=$(PackagesDir)microsoft.build.traversal/$(BuildTraversalSdkOverrideVersion)" />
  </ItemGroup>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))/dir.targets" />
</Project>
